pcgr_json <- grep("cpsr.grch", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
if(length(f)>1){
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
pcgr_data <- jsonlite::fromJSON(PCGR_JSON)
PCGR_JSON
json_file_list
json_file_list <- lapply(json_names, function(f){
grep(f, json_paths, value = TRUE)
})
json_file_list
names(json_file_list) <- json_names
json_file_list
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
if(length(f)>1){
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
PCGR_JSON
PCGR_JSON
pcgr_json
f<-json_file_list[[1]]
f
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
cpsr_json
if(length(f)>1){
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
}
f
cpsr_json
pcgr_json
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
if(length(f)>1){
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr.grch", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr.grch", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
cpsr_json <- grep("cpsr.grch", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr.grch", unlist(f)[2], value = TRUE)
pcgr_json
unlist(f)[2]
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[2], value = TRUE)
pcgr_json
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
if(length(f)>1){
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
parse_jsons <- function(PCGR_JSON = NULL, CPSR_JSON = NULL){
##set flags to be TRUE if we have JSON specified
pcgr <- cpsr <- FALSE
##list to hold what we get
olist <- list(pcgr_snv = NULL,
pcgr_cna = NULL,
pcgr_tmb = NULL,
pcgr_msi = NULL,
cpsr_snv = NULL)
if(!is.null(PCGR_JSON)){
pcgr <- TRUE
pcgr_data <- jsonlite::fromJSON(PCGR_JSON)
olist[["pcgr_snv"]] <- tibble::as_tibble(pcgr_data$content$snv_indel$variant_set$tsv)
olist[["pcgr_cna"]] <- tibble::as_tibble(pcgr_data$content$cna$variant_set$tsv)
olist[["pcgr_tmb"]] <- pcgr_data$content$tmb$v_stat$tmb_estimate
olist[["pcgr_msi"]] <- pcgr_data$content$msi$prediction
}
if(!is.null(CPSR_JSON)){
cpsr <- TRUE
cpsr_data <- jsonlite::fromJSON(CPSR_JSON)
olist[["cpsr_snv"]] <- tibble::as_tibble(cpsr_data$content$snv_indel$variant_set$tsv)
}
##if both jsons, check they are from one sample
if(pcgr && cpsr){
if(unlist(pcgr_snv$VCF_SAMPLE_ID)[1] != unlist(cpsr_snv$VCF_SAMPLE_ID)[1]){
print(paste("Sample IDs do not match",
c(unlist(pcgr_snv$VCF_SAMPLE_ID)[1],
unlist(cpsr_snv$VCF_SAMPLE_ID)[1])), sep = ": ")
} else {
return(olist)
}
##if just one json, return result
} else {
return(olist)
}
}
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
if(length(f)>1){
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
##parse those files in json_files
data_list <- lapply(json_file_list, function(f){
print(paste0("Working on: ", f))
if(length(f)>1){
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr", unlist(f)[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(f)[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
##parse those files in json_files
data_list <- lapply(seq_along(json_file_list), function(f){
print(paste0("Working on: ", names(json_file_list)[f]))
if(length(json_file_list[[f]])>1){
cpsr_json <- grep("cpsr", unlist(json_file_list[[f]])[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(json_file_list[[f]])[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr", unlist(json_file_list[[f]])[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(json_file_list[[f]])[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
data_list
names(data_list)
data_list <- lapply(seq_along(json_file_list), function(f){
print(paste0("Working on: ", names(json_file_list)[f]))
if(length(json_file_list[[f]])>1){
cpsr_json <- grep("cpsr", unlist(json_file_list[[f]])[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(json_file_list[[f]])[2], value = TRUE)
} else {
cpsr_json <- grep("cpsr", unlist(json_file_list[[f]])[1], value = TRUE)
pcgr_json <- grep("pcgr", unlist(json_file_list[[f]])[1], value = TRUE)
}
parse_jsons(PCGR_JSON = pcgr_json,
CPSR_JSON = cpsr_json)
})
names(data_list) <- json_names
return(data_list)
data_list
DATA_LIST<-data_list
TITLE = "comp_PCGR_CPSR", OUTDIR = "./"
TITLE = "comp_PCGR_CPSR"; OUTDIR = "./"
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
return(f$pcgr_snv)
}))
snv_tb
unique(snv_tb$VCF_SAMPLE_ID)
group_by(.data = snv_tb, GENOMIC_CHANGE) %>% add_count() %>% as.data.frame()
group_by(.data = snv_tb, GENOMIC_CHANGE) %>% add_count()
group_by(.data = snv_tb, GENOMIC_CHANGE) %>% add_count() %>% dplyr::filter(n > 1)
s1 <- group_by(.data = snv_tb, GENOMIC_CHANGE) %>% add_count() %>% dplyr::filter(n > 1)
colnames(s1)
s1$n
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
return(f$pcgr_snv)
}))
s1 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1
s2 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1 <- dplyr::filter(.data = snv_tb, ! GENOMIC_CHANGE %in% unique(unlist(s2$GENOMIC_CHANGE)))
s1
snv_tb
s2
s2$GENOMIC_CHANGE[5]
f<-unique(unlist(s2$GENOMIC_CHANGE))[1]
f
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
gcf
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), sep = ",")
samples
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
samples
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf
rbind(gcf[1,], s1)
gcf[1,]
dplyr::bind_rows(gcf[1,], s1)
s2 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1 <- dplyr::filter(.data = snv_tb, ! GENOMIC_CHANGE %in% unique(unlist(s2$GENOMIC_CHANGE)))
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
for(f in unique(unlist(s2$GENOMIC_CHANGE))){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
s1 <- dplyr::bind_rows(gcf[1,], s1)
}
s1
s2
snv_tb
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
multi_list <- lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf[1,]
})
multi_list
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
s3 <- do.call(do.call, lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
)
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
s3 <- do.call(rbind, lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf[1,]
}))
s3
s2
length(unique(s2$GENOMIC_CHANGE))
snv_tb <- dplyr::bind_rows(s3, s1)
snv_tb
do.call(rbind, lapply(DATA_LIST, function(f){
return(f$pcgr_snv)
}))
snv_reduce <- function(DATA_LIST, WHICH){
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
return(f[[WHICH]])
}))
s2 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1 <- dplyr::filter(.data = snv_tb, ! GENOMIC_CHANGE %in% unique(unlist(s2$GENOMIC_CHANGE)))
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
s3 <- tibble:do.call(rbind, lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf[1,]
}))
snv_tb <- dplyr::bind_rows(s3, s1)
}
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
pcgr_snv <- snv_reduce(DATA_LIST, WHICH = "pcgr_snv")
WHICH = "pcgr_snv"
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
return(f[[WHICH]])
}))
snv_tb
s2 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1 <- dplyr::filter(.data = snv_tb, ! GENOMIC_CHANGE %in% unique(unlist(s2$GENOMIC_CHANGE)))
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
s3 <- tibble:do.call(rbind, lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf[1,]
}))
snv_reduce <- function(DATA_LIST, WHICH){
snv_tb <- do.call(rbind, lapply(DATA_LIST, function(f){
return(f[[WHICH]])
}))
s2 <- dplyr::group_by(.data = snv_tb, GENOMIC_CHANGE) %>%
dplyr::add_count() %>%
dplyr::filter(n > 1)
s1 <- dplyr::filter(.data = snv_tb, ! GENOMIC_CHANGE %in% unique(unlist(s2$GENOMIC_CHANGE)))
##each GENOMIC_CHANGE found in s2 needs to be taken, VCF_SAMPLE_ID compiled and rbind to s1
s3 <- do.call(rbind, lapply(unique(unlist(s2$GENOMIC_CHANGE)), function(f){
gcf <- dplyr::filter(.data = s2, GENOMIC_CHANGE %in% !!f)
samples <- paste(unlist(gcf$VCF_SAMPLE_ID), collapse = ",")
gcf[1,"VCF_SAMPLE_ID"] <- samples
gcf[1,]
}))
snv_tb <- dplyr::bind_rows(s3, s1)
return(snv_tb)
}
pcgr_snv <- snv_reduce(DATA_LIST, WHICH = "pcgr_snv")
cpsr_snv <- snv_reduce(DATA_LIST, WHICH = "cpsr_snv")
?openxlsx::addWorksheet
##write to workbook
wb <- openxlsx::createWorkbook(title = TITLE, creator = "parsePcgrCpsr")
openxlsx::addWorksheet(wb, "Somatic_SNVs")
openxlsx::addWorksheet(wb, "Gemline_SNVs")
openxlsx::writeData(wb, "Somatic_SNVs", pcgr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "Gemline_SNVs", cpsr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
getwd()
paste0(OUTDIR, "/", TITLE, ".xlsx")
OUTDIR<-"~/Downloads"
paste0(OUTDIR, "/", TITLE, ".xlsx")
##write to workbook
wb <- openxlsx::createWorkbook(title = paste0(OUTDIR, "/", TITLE, ".xlsx"), creator = "parsePcgrCpsr")
openxlsx::addWorksheet(wb, "Somatic_SNVs")
openxlsx::addWorksheet(wb, "Gemline_SNVs")
openxlsx::writeData(wb, "Somatic_SNVs", pcgr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "Gemline_SNVs", cpsr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
wb
##write to workbook
wb <- openxlsx::createWorkbook(title = TITLE, creator = "parsePcgrCpsr")
openxlsx::addWorksheet(wb, "Somatic_SNVs")
openxlsx::addWorksheet(wb, "Gemline_SNVs")
openxlsx::writeData(wb, "Somatic_SNVs", pcgr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "Gemline_SNVs", cpsr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::saveWorkbook(wb, file = paste0(OUTDIR, "/", TITLE, ".xlsx"), overwrite = TRUE)
olist$pcgr_tmb
olist$pcgr_msi
length(olist$pcgr_msi)
msi<-NA
tmb<-1
na.omit(msi, tmb)
list(MSI = msi, TMB = tmb)
pcgr_snv
pcgr_snv <- snv_reduce(DATA_LIST, WHICH = "pcgr_snv")
cpsr_snv <- snv_reduce(DATA_LIST, WHICH = "cpsr_snv")
##TMB, MSI
msi_tmb <- lapply(DATA_LIST, function(f){
msi <- tmb <- NA
if(length(f$pcgr_msi)>0){
msi <- f$pcgr_msi
}
if(length(f$pcgr_tmb)>0){
tmb <- f$pcgr_tmb
}
return(list(MSI = msi, TMB = tmb))
})
##write to workbook
wb <- openxlsx::createWorkbook(title = TITLE, creator = "parsePcgrCpsr")
openxlsx::addWorksheet(wb, "Somatic_SNVs")
openxlsx::addWorksheet(wb, "Germline_SNVs")
openxlsx::addWorksheet(wb, "MSI_TMB")
openxlsx::writeData(wb, "Somatic_SNVs", pcgr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "Germline_SNVs", cpsr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "MSI_TMB", msi_tmb, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::saveWorkbook(wb, file = paste0(OUTDIR, "/", TITLE, ".xlsx"), overwrite = TRUE)
paste0(OUTDIR, "/", TITLE, ".xlsx")
msi_tmb
unlist(msi_tmb, recursive = FALSE
)
as_tibble(unlist(msi_tmb, recursive = FALSE))
t(as_tibble(unlist(msi_tmb, recursive = FALSE)))
t(as_tibble(unlist(msi_tmb)))
unlist(msi_tmb)
msi_tmb
as_tibble(msi_tmb)
f<-DATA_LIST[[1]]
f
f$pcgr_msi
msi <- tmb <- NA
if(length(f$pcgr_msi)>0){
msi <- f$pcgr_msi
}
if(length(f$pcgr_tmb)>0){
tmb <- f$pcgr_tmb
}
msi
tmb
names(f)
f
seq_along(DATA_LIST)
f<-1
names(DATA_LIST)[1]
msi_tmb <- lapply(seq_along(DATA_LIST), function(f){
msi <- tmb <- "Not estimated"
if(length(f$pcgr_msi)>0){
msi <- f$pcgr_msi
}
if(length(f$pcgr_tmb)>0){
tmb <- f$pcgr_tmb
}
return(tibble::tibble(sampleID = names(DATA_LIST)[f],
TMB = tmb, MSI = msi))
})
##TMB, MSI
msi_tmb <- lapply(seq_along(DATA_LIST), function(f){
msi <- tmb <- "Not estimated"
if(length(DATA_LIST[[f]]$pcgr_msi)>0){
msi <- DATA_LIST[[f]]$pcgr_msi
}
if(length(DATA_LIST[[f]]$pcgr_tmb)>0){
tmb <- DATA_LIST[[f]]$pcgr_tmb
}
return(tibble::tibble(sampleID = names(DATA_LIST)[f],
TMB = tmb, MSI = msi))
})
msi_tmb
##TMB, MSI
msi_tmb <- do.call(rbind, lapply(seq_along(DATA_LIST), function(f){
msi <- tmb <- "Not estimated"
if(length(DATA_LIST[[f]]$pcgr_msi)>0){
msi <- DATA_LIST[[f]]$pcgr_msi
}
if(length(DATA_LIST[[f]]$pcgr_tmb)>0){
tmb <- DATA_LIST[[f]]$pcgr_tmb
}
return(tibble::tibble(sampleID = names(DATA_LIST)[f],
TMB = tmb, MSI = msi))
}))
msi_tmb
##write to workbook
wb <- openxlsx::createWorkbook(title = TITLE, creator = "parsePcgrCpsr")
openxlsx::addWorksheet(wb, "Somatic_SNVs")
openxlsx::addWorksheet(wb, "Germline_SNVs")
openxlsx::addWorksheet(wb, "MSI_TMB")
openxlsx::writeData(wb, "Somatic_SNVs", pcgr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "Germline_SNVs", cpsr_snv, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::writeData(wb, "MSI_TMB", msi_tmb, colNames = TRUE, borders = "none", borderStyle = "none", rowNames = FALSE)
openxlsx::saveWorkbook(wb, file = paste0(OUTDIR, "/", TITLE, ".xlsx"), overwrite = TRUE)
tibble::tibble(Step = c(1,2,3),
Process = c("Add 10ul of each DNA pool to one tube, and 10ul of each RNA pool to another tube. These two tubes are now at 50pm of each library pool", "Take 20ul of DNA pool, and combine with 5ul of RNA pool", "This is the final pool used for templating"))
?openxlsx::writeData
250/12
50/15
250/122
250/12
tibble::tibble(code = c("A42008", "A34461", "4468802", "11754-050", "4479790", "A27764"),
name = c("Oncomine Focus, Chef Ready 32 Rxns",
"Ion 51/2/30 Kit - Chef",
"Ion Library TaqMan Quant. Kit 250 Rxns",
"SuperScript VILO cDNA Synth. Kit 50 Rxns",
"Ion Ampliseq Sample ID Panel",
"Ion 530 Chip Kit 8x"),
uses = c(2, 4, 20, 3, 48, 8))
btch_code_vec <- function(){
c("A42008" = "DL8",
"A34461" = "SEQ",
"4468802" = "TAQ",
"11754-050" = "SUP",
"4479790" = "SID",
"A27764" = "CHP")
}
KIT<-"A42008"
btch_code_vec()[KIT,]
btch_code_vec()[KIT]
?starts_with
lubridate::year()
lubridate::year(today)
lubridate::year(lubridate::today())
lubridate::yr(lubridate::today())
lubridate::year(lubridate::today())
gsub(20, "", lubridate::year(lubridate::today()))
strsplit(lubridate::year(lubridate::today()))[[1]][3:4]
strsplit(lubridate::year(lubridate::today()), "")[[1]][3:4]
strsplit(lubridate::year(lubridate::today()), "\\")[[1]][3:4]
strsplit(lubridate::year(lubridate::today()), "\")[[1]][3:4]
)
last_code <- "DL8_22_51"
next_code <- strsplit(last_code, "_")[[1]]
next_code
paste0(next_code[1], "_",
gsub(20, "", lubridate::year(lubridate::today())),
next_code[3]+1)
paste0(next_code[1], "_",
gsub(20, "", lubridate::year(lubridate::today())),
as.numeric(next_code[3])+1)
paste0(next_code[1], "_",
gsub(20, "", lubridate::year(lubridate::today())), "_",
as.numeric(next_code[3])+1)
VALS_DATA$Data$code
is.null(VALS_DATA$Data$code)
VALS_DATA<-list(Data=list(code=1))
VALS_DATA$Data$code
is.null(VALS_DATA$Data$code)
VALS_DATA<-list(Data)
VALS_DATA<-list(Data=1)
is.null(VALS_DATA$Data$code)
is.null(VALS_DATA$Data$code)
VALS_DATA<-list(Data=tibble(code=1))
is.null(VALS_DATA$Data$code)
VALS_DATA<-list(Data=tibble(poop=1))
is.null(VALS_DATA$Data$code)
750*.23
725*.23
900*.77
750*.77
